import './styles/main.scss';
import './styles/theme.scss';
import type { optionTypes } from '../timepicker/utils/types';
export default class TimepickerUI {
    _degreesHours: number;
    _degreesMinutes: number;
    _options: optionTypes;
    eventsClickMobile: (event: Event) => Promise<void>;
    eventsClickMobileHandler: any;
    mutliEventsMove: (event: Event) => void;
    mutliEventsMoveHandler: any;
    private _clickTouchEvents;
    private _element;
    private _isMobileView;
    private _isTouchMouseMove;
    constructor(element: HTMLDivElement, options: optionTypes);
    private get modalTemplate();
    private get modalElement();
    private get clockFace();
    private get input();
    private get clockHand();
    private get circle();
    private get tipsWrapper();
    private get minutes();
    private get hour();
    private get AM();
    private get PM();
    private get minutesTips();
    private get hourTips();
    private get allValueTips();
    private get openElementData();
    private get openElement();
    private get cancelButton();
    private get okButton();
    private get activeTypeMode();
    private get keyboardClockIcon();
    private get footer();
    create(): void;
    open: () => void;
    _setTheme: () => void;
    close: () => void;
    _setInputClassToInputElement: () => void;
    _setDataOpenToInputIfDosentExistInWrapper: () => void;
    _setClassTopOpenElement: () => void;
    _removeBackdrop: () => void;
    _setNormalizeClass: () => void;
    _setFlexEndToFooterIfNoKeyboardIcon: () => void;
    _eventsBundle: () => void;
    _handleOpenOnClick: () => void;
    _getInputValueOnOpenAndSet: () => void;
    _handleCancelButton: () => void;
    _handleOkButton: () => void;
    _handleBackdropClick: () => void;
    _setBgColorToCirleWithHourTips: () => void;
    _setBgColorToCircleWithMinutesTips: () => void;
    _removeBgColorToCirleWithMinutesTips: () => void;
    _setTimepickerClassToElement: () => void;
    _setClassActiveToHourOnOpen: () => void;
    _setMinutesToClock: (value: string) => void;
    _setHoursToClock: (value: string) => void;
    _setTransformToCircleWithSwitchesHour: (val: string | null) => void;
    _setTransformToCircleWithSwitchesMinutes: (val: string) => void;
    _handleAmClick: () => void;
    _handlePmClick: () => void;
    _handleAnimationClock: () => void;
    _handleAnimationSwitchTipsMode: () => void;
    _handleHourClick: () => void;
    _handleMinutesClick: () => void;
    _handleEventToMoveHand: (event: {
        preventDefault?: any;
        type?: any;
        target?: any;
    }) => void;
    _toggleClassActiveToValueTips: (value: string | number | null) => void;
    _handleMoveHand: () => void;
    _setModalTemplate: () => void;
    _setScrollbarOrNot: () => void;
    _setAnimationToOpen: () => void;
    _removeAnimationToClose: () => void;
    _handleValueAndCheck(val: string | null, type: string): undefined | boolean;
    _handleIconChangeView: () => Promise<void>;
    _handlerClickPmAm: (event: {
        target: any;
    }) => Promise<void>;
    _handleClickOnHourMobile: () => void;
}
